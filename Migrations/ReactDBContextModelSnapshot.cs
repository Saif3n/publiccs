// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using React.Data;

#nullable disable

namespace PersonalBackend.Migrations
{
    [DbContext(typeof(ReactDBContext))]
    partial class ReactDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.8");

            modelBuilder.Entity("React.Models.RaceResult", b =>
                {
                    b.Property<int>("resultID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("driver")
                        .HasColumnType("TEXT");

                    b.Property<string>("race")
                        .HasColumnType("TEXT");

                    b.Property<string>("raceDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("racePosition")
                        .HasColumnType("TEXT");

                    b.Property<string>("teamName")
                        .HasColumnType("TEXT");

                    b.HasKey("resultID");

                    b.ToTable("RaceResult");
                });

            modelBuilder.Entity("React.Models.Restaurant", b =>
                {
                    b.Property<int>("restaurantID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("priceTier")
                        .HasColumnType("TEXT");

                    b.Property<string>("restaurantCuisine")
                        .HasColumnType("TEXT");

                    b.Property<string>("restaurantName")
                        .HasColumnType("TEXT");

                    b.Property<string>("restaurantStreetAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("restaurantSuburb")
                        .HasColumnType("TEXT");

                    b.HasKey("restaurantID");

                    b.ToTable("Restaurant");
                });

            modelBuilder.Entity("React.Models.RestaurantUser", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("dateJoined")
                        .HasColumnType("TEXT");

                    b.Property<string>("emailAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("password")
                        .HasColumnType("TEXT");

                    b.Property<string>("userName")
                        .HasColumnType("TEXT");

                    b.HasKey("userId");

                    b.ToTable("RestaurantUser");
                });

            modelBuilder.Entity("React.Models.Review", b =>
                {
                    b.Property<int>("reviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("requiredBooking")
                        .HasColumnType("TEXT");

                    b.Property<string>("reviewDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("reviewTime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("timeWaited")
                        .HasColumnType("INTEGER");

                    b.Property<string>("weekDay")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("reviewId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("React.Models.Sponsors", b =>
                {
                    b.Property<int>("sponsorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("isCrypto")
                        .HasColumnType("INTEGER");

                    b.Property<string>("sponsorLink")
                        .HasColumnType("TEXT");

                    b.Property<string>("sponsorName")
                        .HasColumnType("TEXT");

                    b.Property<string>("sponsorStockName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("sponsorYear")
                        .HasColumnType("INTEGER");

                    b.Property<string>("teamName")
                        .HasColumnType("TEXT");

                    b.HasKey("sponsorID");

                    b.ToTable("Sponsors");
                });

            modelBuilder.Entity("React.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("React.Models.Review", b =>
                {
                    b.HasOne("React.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("React.Models.RestaurantUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
